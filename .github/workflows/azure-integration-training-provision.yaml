name: 'create azure resources'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'the Github Environment that specifies where to create the Azure resources.'
        type: environment
        required: true
      numberOfAzureUsers:
        description: 'the number of Azure users to create.'
        type: number
        required: false
        default: 1
      azureRegion:
        description: 'the azure region to deploy resources into.'
        type: choice
        required: false
        default: 'Central US'
        options:
          - 'Central US'
          - 'East US'
          - 'East US 2'

jobs:
  create-azure-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3

      - name: Log in with Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      
      - id: setup-azure
        name: Setup Azure Environment
        uses: azure/powershell@v2
        with:
          inlineScript: |
            $password = ConvertTo-SecureString -String "${{ secrets.AZURE_USER_PASSWORD }}" -AsPlainText -Force
            $resourceGroups = ./azure-integration/infrastructure/scripts/setup-azure.ps1 `
              -NumberOfUsers "${{ inputs.numberOfAzureUsers }}" `
              -DomainName "${{ vars.AZURE_DOMAIN_NAME }}" `
              -Password $password `
              -OwnerId "${{ secrets.AZURE_OWNER_ID }}" `
              -SubscriptionId "${{ secrets.AZURE_SUBSCRIPTION_ID }}" `
              -DefaultResourceGroup "${{ vars.AZURE_RESOURCE_GROUP }}" `
              -Location "${{ inputs.azureRegion }}"
            
            "RESOURCE_GROUPS=$resourceGroups" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          azPSVersion: 'latest'

      - id: calculate-webapp-count
        name: Calculate Web App Count
        shell: pwsh
        run: |
          $webAppCount = [int][Math]::Ceiling(${{ inputs.numberOfAzureUsers }} / 5)
          "WEB_APP_COUNT=$webAppCount" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: 'Create Bicep Deployment Stack'
        uses: azure/powershell@v2
        with:
          azPSVersion: 'latest'
          inlineScript: |
            $templateParams = @{
              resourceGroups="${{ steps.setup-azure.outputs.RESOURCE_GROUPS }}";
              adminPassword="${{ secrets.AZURE_USER_PASSWORD }}";
              webAppCount=[int]"${{ steps.calculate-webapp-count.outputs.WEB_APP_COUNT }}";
            }
            New-AzResourceGroupDeploymentStack `
              -Name "dd-training-deployment-stack" `
              -ResourceGroupName "${{ vars.AZURE_RESOURCE_GROUP }}" `
              -TemplateFile "./azure-integration/infrastructure/bicep/main.bicep" `
              -TemplateParameterObject $templateParams `
              -DenySettingsMode "none" `
              -SkipTemplateParameterPrompt

      - name: Check Bicep Deployment Status
        uses: azure/powershell@v2
        with:
          inlineScript: |
            Write-Host "Checking resource group deployment statuses."
            $foundBadDeployment = $false
            $resourceGroups = Get-AzResourceGroup -Tag @{ company="datadog" }
            foreach ($rg in $resourceGroups) {
              $deployments = Get-AzResourceGroupDeployment -ResourceGroupName $rg.ResourceGroupName
              foreach ($deployment in $deployments) {
                if ($deployment.ProvisioningState -ne "succeeded") {
                  $foundBadDeployment = $true
                  Write-Host "Resource group deployment '$($deployment.DeploymentName)' in resource group '$($rg.ResourceGroupName)' has provisioning state '$($deployment.ProvisioningState)'."
                  Write-Host "Please check this resource group deployment in Azure and re-deploy if neccessary."
                }
              }
            }

            if (-not $foundBadDeployment) {
              Write-Host "All resource group deployments were provisioned successfully."
            }
          azPSVersion: 'latest'

